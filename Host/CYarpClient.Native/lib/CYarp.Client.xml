<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CYarp.Client</name>
    </assembly>
    <members>
        <member name="T:CYarp.Client.AOT">
            <summary>
            AOT compilation
            </summary>
        </member>
        <member name="T:CYarp.Client.AOT.ErrorCode">
            <summary>
            Error codes
            </summary>
        </member>
        <member name="F:CYarp.Client.AOT.ErrorCode.InvalidHandle">
            <summary>
            Invalid handle
            </summary>
        </member>
        <member name="F:CYarp.Client.AOT.ErrorCode.NoError">
            <summary>
            No error
            </summary>
        </member>
        <member name="F:CYarp.Client.AOT.ErrorCode.ConnectFailure">
            <summary>
            Failed to connect to server
            </summary>
        </member>
        <member name="F:CYarp.Client.AOT.ErrorCode.ConnectTimedout">
            <summary>
            Connection to server timed out
            </summary>
        </member>
        <member name="F:CYarp.Client.AOT.ErrorCode.ConnectUnauthorized">
            <summary>
            Connection authentication failed
            </summary>
        </member>
        <member name="T:CYarp.Client.AOT.ClientOptions">
            <summary>
            Client options
            </summary>
        </member>
        <member name="M:CYarp.Client.AOT.CYarpClientCreate(CYarp.Client.AOT.ClientOptions*)">
            <summary>
            Create client
            </summary>
            <returns>Client handle</returns>
        </member>
        <member name="M:CYarp.Client.AOT.CYarpClientFree(System.IntPtr)">
            <summary>
            Release client
            </summary>
            <param name="clientPtr">Client handle</param>
        </member>
        <member name="M:CYarp.Client.AOT.CYarpClientTransport(System.IntPtr)">
            <summary>
            Synchronous data transmission
            </summary>
            <param name="clientPtr">Client handle</param> 
            <returns>Transport error enumeration</returns>
        </member>
        <member name="M:CYarp.Client.AOT.CYarpClientTransportAsync(System.IntPtr,)">
            <summary>
            Asynchronous data transmission
            </summary>
            <param name="clientPtr">Client handle</param>
            <param name="completedCallback">Transport completion callback, null for synchronous call</param>
            <returns>Transport error enumeration</returns>
        </member>
        <member name="M:CYarp.Client.AOT.Transport(System.IntPtr)">
            <summary>
            Synchronous data transmission
            </summary>
            <param name="clientPtr"></param>
            <returns></returns>
        </member>
        <member name="M:CYarp.Client.AOT.TransportAsync(CYarp.Client.CYarpClient,System.Action{CYarp.Client.AOT.ErrorCode})">
            <summary>
            Transport data
            </summary>
            <param name="client">Client</param>
            <param name="completedCallback">Transport completion callback</param>        
        </member>
        <member name="T:CYarp.Client.CYarpClient">
            <summary>
            CYarpClient
            </summary>
        </member>
        <member name="P:CYarp.Client.CYarpClient.TunnelCount">
            <summary>
            Get current tunnel count
            </summary>
        </member>
        <member name="M:CYarp.Client.CYarpClient.#ctor(CYarp.Client.CYarpClientOptions)">
            <summary>
            CYarpClient
            </summary>
            <param name="options">Client options</param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:CYarp.Client.CYarpClient.#ctor(CYarp.Client.CYarpClientOptions,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            CYarpClient
            </summary>
            <param name="options">Client options</param>
            <param name="logger"></param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:CYarp.Client.CYarpClient.#ctor(CYarp.Client.CYarpClientOptions,Microsoft.Extensions.Logging.ILogger,System.Net.Http.HttpMessageHandler,System.Boolean)">
            <summary>
            CYarpClient
            </summary>
            <param name="options">Client options</param>
            <param name="logger">Logger component</param> 
            <param name="handler">httpHandler</param>
            <param name="disposeHandler"></param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:CYarp.Client.CYarpClient.TransportAsync(System.Threading.CancellationToken)">
            <summary>
            Connect to CYarp server and start tunnel transport
            </summary> 
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:CYarp.Client.CYarpConnectException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.OperationCanceledException"></exception>
        </member>
        <member name="M:CYarp.Client.CYarpClient.TransportCoreAsync(System.Threading.CancellationToken)">
            <summary>
            Connect to CYarp server and start tunnel transport
            </summary> 
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:CYarp.Client.CYarpConnectException"></exception> 
            <exception cref="T:System.OperationCanceledException"></exception>
        </member>
        <member name="M:CYarp.Client.CYarpClient.BindTunnelIOAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Bind tunnel IO
            </summary> 
            <param name="tunnelId"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:CYarp.Client.CYarpClient.OnTunnelException(System.Exception)">
            <summary>
            When tunnel exception occurs
            </summary>
            <param name="ex">Exception</param>
        </member>
        <member name="M:CYarp.Client.CYarpClient.Dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:CYarp.Client.CYarpClient.Dispose(System.Boolean)">
            <summary>
            Release resources
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:CYarp.Client.CYarpClientOptions">
            <summary>
            Client options
            </summary>
        </member>
        <member name="P:CYarp.Client.CYarpClientOptions.ServerUri">
            <summary>
            CYarp server URI
            Supports http, https, ws and wss
            </summary>
        </member>
        <member name="P:CYarp.Client.CYarpClientOptions.TargetUri">
            <summary>
            Target server URI
            Supports http and https
            </summary>
        </member>
        <member name="P:CYarp.Client.CYarpClientOptions.TargetUnixDomainSocket">
            <summary>
            UnixDomainSocket path of target server [optional]
            </summary>
        </member>
        <member name="P:CYarp.Client.CYarpClientOptions.Authorization">
            <summary>
            Authorization header value for connecting to CYarp server
            </summary>
        </member>
        <member name="P:CYarp.Client.CYarpClientOptions.ConnectTimeout">
            <summary>
            Connection timeout duration with server or target
            Default is 5s
            </summary>
        </member>
        <member name="F:CYarp.Client.CYarpClientOptions.TunnelErrorCallback">
            <summary>
            Tunnel transport error callback
            </summary>
        </member>
        <member name="P:CYarp.Client.CYarpClientOptions.KeepAliveInterval">
            <summary>
            Heartbeat period
            Default 30s
            </summary>
        </member>
        <member name="M:CYarp.Client.CYarpClientOptions.Validate">
            <summary>
            Validate parameters
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:CYarp.Client.CYarpConnectError">
            <summary>
            Connection error codes
            </summary>
        </member>
        <member name="F:CYarp.Client.CYarpConnectError.Failure">
            <summary>
            Connection failed
            </summary>
        </member>
        <member name="F:CYarp.Client.CYarpConnectError.Timedout">
            <summary>
            Connection timed out
            </summary>
        </member>
        <member name="F:CYarp.Client.CYarpConnectError.Unauthorized">
            <summary>
            Connection authentication failed
            </summary>
        </member>
        <member name="T:CYarp.Client.CYarpConnectException">
            <summary>
            Connection exception
            </summary>
        </member>
        <member name="P:CYarp.Client.CYarpConnectException.ErrorCode">
            <summary>
            Get connection error code
            </summary>
        </member>
        <member name="M:CYarp.Client.CYarpConnectException.#ctor(CYarp.Client.CYarpConnectError,System.Exception)">
            <summary>
            CYarpException
            </summary>
            <param name="errorCode"></param> 
            <param name="innerException"></param>
        </member>
        <member name="T:CYarp.Client.CYarpConnection">
            <summary>
            CYarp connection
            </summary>
        </member>
        <member name="M:CYarp.Client.CYarpConnection.KeepAliveTimerTick(System.Object)">
            <summary>
            Heartbeat timer
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:CYarp.Client.CYarpConnectionFactory.CreateTargetTunnelAsync(System.Threading.CancellationToken)">
            <summary>
            Create channel to destination
            </summary> 
            <param name="cancellationToken"></param>
            <exception cref="T:CYarp.Client.CYarpConnectException"></exception>
            <exception cref="T:System.OperationCanceledException"></exception>
            <returns></returns>
        </member>
        <member name="M:CYarp.Client.CYarpConnectionFactory.CreateServerTunnelAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Create channel to server
            </summary> 
            <param name="tunnelId"></param>
            <param name="cancellationToken"></param>
            <exception cref="T:CYarp.Client.CYarpConnectException"></exception>
            <exception cref="T:System.OperationCanceledException"></exception>
            <returns></returns>
        </member>
        <member name="M:CYarp.Client.CYarpConnectionFactory.CreateServerConnectionAsync(System.Threading.CancellationToken)">
            <summary>
            Create connection to CYarp server
            </summary> 
            <param name="cancellationToken"></param>
            <exception cref="T:CYarp.Client.CYarpConnectException"></exception>
            <exception cref="T:System.OperationCanceledException"></exception>
            <returns></returns>
        </member>
        <member name="T:CYarp.Client.CYarpConnectionFactory.ForceFlushStream">
            <summary>
            Auto-flushing stream
            </summary>
        </member>
        <member name="T:CYarp.Client.CYarpConnectionFactory.SafeWriteStream">
            <summary>
            Safe write stream
            </summary>
        </member>
        <member name="T:CYarp.Client.DelegatingStream">
            <summary>
            Delegating stream
            </summary>
        </member>
        <member name="F:CYarp.Client.DelegatingStream.Inner">
            <summary>
            Get the wrapped stream object
            </summary>
        </member>
        <member name="M:CYarp.Client.DelegatingStream.#ctor(System.IO.Stream)">
            <summary>
            Delegating stream
            </summary>
            <param name="inner"></param>
        </member>
        <member name="P:CYarp.Client.DelegatingStream.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:CYarp.Client.DelegatingStream.CanSeek">
            <inheritdoc/>
        </member>
        <member name="P:CYarp.Client.DelegatingStream.CanWrite">
            <inheritdoc/>
        </member>
        <member name="P:CYarp.Client.DelegatingStream.Length">
            <inheritdoc/>
        </member>
        <member name="P:CYarp.Client.DelegatingStream.CanTimeout">
            <inheritdoc/>
        </member>
        <member name="P:CYarp.Client.DelegatingStream.ReadTimeout">
            <inheritdoc/>
        </member>
        <member name="P:CYarp.Client.DelegatingStream.WriteTimeout">
            <inheritdoc/>
        </member>
        <member name="P:CYarp.Client.DelegatingStream.Position">
            <inheritdoc/>
        </member>
        <member name="M:CYarp.Client.DelegatingStream.Flush">
            <inheritdoc/>
        </member>
        <member name="M:CYarp.Client.DelegatingStream.FlushAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CYarp.Client.DelegatingStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CYarp.Client.DelegatingStream.Read(System.Span{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:CYarp.Client.DelegatingStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CYarp.Client.DelegatingStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CYarp.Client.DelegatingStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc/>
        </member>
        <member name="M:CYarp.Client.DelegatingStream.SetLength(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:CYarp.Client.DelegatingStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CYarp.Client.DelegatingStream.Write(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:CYarp.Client.DelegatingStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CYarp.Client.DelegatingStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CYarp.Client.DelegatingStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:CYarp.Client.DelegatingStream.EndRead(System.IAsyncResult)">
            <inheritdoc/>
        </member>
        <member name="M:CYarp.Client.DelegatingStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:CYarp.Client.DelegatingStream.EndWrite(System.IAsyncResult)">
            <inheritdoc/>
        </member>
        <member name="M:CYarp.Client.DelegatingStream.ReadByte">
            <inheritdoc/>
        </member>
        <member name="M:CYarp.Client.DelegatingStream.WriteByte(System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:CYarp.Client.DelegatingStream.Close">
            <inheritdoc/>
        </member>
    </members>
</doc>
